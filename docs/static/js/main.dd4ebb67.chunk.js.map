{"version":3,"sources":["Components/Fox.jsx","App.js","serviceWorker.js","index.js"],"names":["ranks","Fox","props","levelUp","state","currentRank","length","setState","alert","rank","className","this","name","furColor","onClick","style","backgroundColor","color","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gMAGMA,EAAQ,CACZ,OACA,SACA,SACA,QACA,OACA,QACA,OACA,WA4CaC,E,kDAvCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,QAAU,WACL,EAAKC,MAAMC,cAAgBL,EAAMM,OAAO,GACzC,EAAKC,SAAS,CAACF,YAAa,EAAKD,MAAMC,YAAY,IAAI,WACvB,IAA3B,EAAKD,MAAMC,aACZG,MAAM,uCATZ,EAAKJ,MAAQ,CACXC,YAAa,EAAKH,MAAMO,MAHT,E,qDAkBjB,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cACVC,KAAKT,MAAMU,MAEf,uBAAGF,UAAU,aAAb,gBAAwCV,EAAMW,KAAKP,MAAMC,cACzD,uBAAGK,UAAU,aAAb,cAAsCC,KAAKT,MAAMW,UACjD,4BACEC,QAAUH,KAAKR,QACfO,UAAU,MACVK,MAAO,CAACC,gBAAiB,gBAAiBC,MAAO,SAHnD,iB,GA5BQC,aC6BHC,MArCf,WACE,OACE,yBAAKT,UAAU,aACb,yBAAKA,UAAU,aACb,4CAEF,yBAAKA,UAAU,OACb,kBAAC,EAAD,CACEE,KAAK,oBACLH,KAAM,EACNI,SAAS,WAEX,kBAAC,EAAD,CACED,KAAK,YACLH,KAAM,EACNI,SAAS,WAEX,kBAAC,EAAD,CACED,KAAK,eACLH,KAAM,EACNI,SAAS,aAEX,kBAAC,EAAD,CACED,KAAK,QACLH,KAAM,EACNI,SAAS,WAEX,kBAAC,EAAD,CACED,KAAK,iBACLH,KAAM,EACNI,SAAS,cCxBCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.dd4ebb67.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nconst ranks = [\n  \"Serf\",\n  \"Yeoman\",\n  \"Knight\",\n  \"Baron\",\n  \"Earl\",\n  \"Count\",\n  \"Duke\",\n  \"Emperor\"\n];\n\nclass Fox extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentRank: this.props.rank\n    };\n  }\n\n  levelUp = () => {\n    if(this.state.currentRank !== ranks.length-1) {\n      this.setState({currentRank: this.state.currentRank+1}, () => {\n        if(this.state.currentRank === 7) {\n          alert(\"Congrats you're the emperor now\");\n        }\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"card col-md-6\">\n        <div className=\"card-body\">\n          <h2 className=\"card-title\">\n            { this.props.name }\n          </h2>\n          <p className=\"card-text\">Royal Title: { ranks[this.state.currentRank] }</p>\n          <p className=\"card-text\">Fur Color: { this.props.furColor }</p>\n          <button \n            onClick={ this.levelUp }\n            className=\"btn\" \n            style={{backgroundColor: \"rebeccapurple\", color: \"#fff\"}}\n          >\n            Rank up\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Fox;","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Fox from './Components/Fox';\n\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        <h1>Royal Foxes</h1>\n      </div>\n      <div className=\"row\">\n        <Fox \n          name=\"Fantastic Mr. Fox\"\n          rank={1}\n          furColor=\"Auburn\"\n        />\n        <Fox \n          name=\"Michael J\"\n          rank={2}\n          furColor=\"Silver\"\n        />\n        <Fox \n          name=\"Fox Mc Cloud\"\n          rank={3}\n          furColor=\"Brownish\"\n        />\n        <Fox \n          name=\"Sandy\"\n          rank={4}\n          furColor=\"Blonde\"\n        />\n        <Fox \n          name=\"Karama Kiyubii\"\n          rank={0}\n          furColor=\"Orange\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}